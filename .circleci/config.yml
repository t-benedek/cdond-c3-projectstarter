version: 2.1

orbs:
  slack: circleci/slack@4.3.3
  aws-cli: circleci/aws-cli@2.0.0

# My standard docker for node js used in compile & test of frontend and backend
docker-def: &docker-def
    docker:
      - image: circleci/node:13.8.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Deleting the S3 bucket and files
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
  
  amazonservices:
    description: installing aws cli
    steps:
      - run:
          name: installation of pip and aws cli
          # Add when this will run
          command: |
            apk add --no-cache \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install \
            awscli \
            && rm -rf /var/cache/apk/*
  

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            statuscheck=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/<< pipeline.id >>_migrations)
            if(( $statuscheck=="true")); 
            then
            echo "Reverting the changes"
            npm run migrations:revert
            else
            echo "no migration occured"           
            fi    

jobs:
  build-frontend:
    <<: *docker-def
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - run: 
          name: Exeption handling
          command: |
            echo "Building FRONTEND failed !!! "
            exit 1
          when: on_fail
      - slack/notify:
          event: fail
          template: basic_fail_1
          channel: udacity
      - slack/notify:
          event: pass    
          template: basic_success_1      
          channel: udacity
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    <<: *docker-def
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - run: 
          name: Exeption handling
          command: |
            echo "Building BACKEND failed !!! "
            exit 1
          when: on_fail
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *docker-def
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: run frontend unit tests
          command: |
            cd frontend
            npm install
            npm install oauth-sign
            npm run test
      - run: 
          name: Exeption handling
          command: |
            echo "Testing FRONTEND failed !!! "
            exit 1
          when: on_fail         
  
  test-backend:
    <<: *docker-def
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: run backend unit tests
          command: |
            cd backend
            npm install
            npm install oauth-sign
            npm run test
      - run: 
          name: Exeption handling
          command: |
            echo "Testing BACKEND failed !!! "
            exit 1
          when: on_fail             
  
  scan-frontend:
    <<: *docker-def
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: run vulnerability tests
          command: |
            cd frontend
            npm install
            npm install oauth-sign
            npm audit fix --audit-level=critical --force
      - run: 
          name: Exeption handling
          command: |
            echo "Auditing frontend failed !!! "
            exit 1
          when: on_fail    

  scan-backend:
    <<: *docker-def
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: run vulnerability tests
          command: |
            cd backend
            npm install
            npm install oauth-sign
            npm audit fix --audit-level=critical --force
      - run: 
          name: Exeption handling
          command: |
            echo "Auditing backend failed !!! "
            exit 1
          when: on_fail    

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: installing required software
          command: |
            yum install tar -y
            yum install gzip -y
            yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            yum install jq -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .circleci/ansible/
          paths:
            - inventory.txt
      - run: pwd
      - run: cat .circleci/ansible/inventory.txt
      - destroy-environment     
  
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "93:37:86:ea:0e:34:8a:ca:5a:25:18:42:3d:86:45:ac"
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: installation of pip and aws cli
          command: |
            apk add --no-cache \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install \
            awscli \
            && rm -rf /var/cache/apk/*
      - run: pwd
      - run: cat .circleci/ansible/inventory.txt
      - run:
          name: Configure server
          no_output_timeout: 30m
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: awscli install
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -qq install awscli
            sudo apt-get -y -qq install python3
      - run:
          name: Run migrations
          no_output_timeout: 10m
          command: |
            cd backend
            npm install
            touch .env
            echo ENVIROMENT=production > .env
            echo TYPEORM_CONNECTION=postgres >> .env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> .env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            ls -latr
            touch dbmigrationresults
            npm run migrations >> dbmigrationresults
            cat dbmigrationresults
      - run:
          name: Send migration results to memstash
          command: |
            if grep "successfully" dbmigrationresults
            then 
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "true" https://api.memstash.io/values/<< pipeline.id >>_migrations
            else
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "false" https://api.memstash.io/values/<< pipeline.id >>_migrations
            fi
      - destroy-environment
      - revert-migrations 

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install tar -y
            yum install gzip -y
            yum install python3-pip -y
            yum -y install curl -y
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            echo $BACKEND_IP > .circleci/ansible/backendip
            cd frontend
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}" 
            npm install 
            npm run build
      - persist_to_workspace:
          root: .circleci/ansible/
          paths:
            - backendip
      - store_artifacts: # See circleci.com/docs/2.0/artifacts/ for more details.
          path: .circleci/ansible/backendip
      - run:
          name: copy the s3 url
          command: |
            echo "http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com" > ./.circleci/ansible/URL02S3
      - store_artifacts: # See circleci.com/docs/2.0/artifacts/ for more details.
          path: .circleci/ansible/URL02S3
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp frontend/dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "93:37:86:ea:0e:34:8a:ca:5a:25:18:42:3d:86:45:ac"
      - attach_workspace:
          at: .circleci/ansible/
      - store_artifacts: # See circleci.com/docs/2.0/artifacts/ for more details.
          path: .circleci/ansible/inventory.txt
          destination: artifact-file
      - run:
          name: Install dependencies
          no_output_timeout: 30m
          command: |
            apk add --update tar gzip ansible nodejs npm
            pip install awscli
      - run:
          name: deploy backend
          no_output_timeout: 60m
          command: |
            echo ENVIROMENT=development > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            pwd
            ls -la
            ansible-playbook -i ~/project/inventory.txt deploy-backend.yml
      - amazonservices
      - run: cat .circleci/ansible/inventory.txt
      - run:
          name: Deploy backend
          no_output_timeout: 60m
          command: |
            cat .circleci/ansible/inventory.txt
            printenv >> ./backend/.env
            cat ./backend/.env
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - amazonservices
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl jq
      - run:
          name: Get backend url
          command: |
            cat ./.circleci/ansible/backendip
            backend_ip=$(cat .circleci/ansible/backendip)
            echo "http://$backend_ip:3030"
            curl "http://$backend_ip:3030/api/status"
            if curl -s "http://$backend_ip:3030/api/status" | grep "ok"
            then
              echo "Backend alive, Proceeding"
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            if curl -s  "http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com" | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
            yum install python3-pip -y
            yum -y install curl -y
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "${CIRCLE_WORKFLOW_ID}" https://api.memstash.io/values/workflow_${CIRCLE_WORKFLOW_ID}
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --tags project=udapeople \
            --stack-name udapeople-cloudfront \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment
      - revert-migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/workflow_${CIRCLE_WORKFLOW_ID})
            echo Old Workflow Id: "${OldWorkflowID}"
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
      - run:
          name: Remove old stacks and files
          command: |
            echo Old Workflow Id: "${OldWorkflowID}"
            echo Current Workflow Id: "${CIRCLE_WORKFLOW_ID:0:7}"
            if [[ ! -z "${OldWorkflowID}" ]] && [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo Remove old stack
              aws s3 rb s3://udapeople-${OldWorkflowID} --force
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
      - destroy-environment
      - revert-migrations
            
workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      - cloudfront-update
          # requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]